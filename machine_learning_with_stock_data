import pandas as pd
import pandas_datareader as web
import datetime as dt
import numpy as np
import math
import matplotlib.pyplot as plt
from sklearn import preprocessing, svm, model_selection
from sklearn.linear_model import LinearRegression
from matplotlib import style

ticker = 'GOOG'

start = dt.datetime(2010, 1, 1)
end = dt.datetime(2020, 1, 1)

#
def ticker_prediction_ML():
    df = web.DataReader(ticker, 'yahoo', start, end)
    df = df[['Open', 'High',  'Low',  'Close', 'Volume']]

    # High to low procent change (volatility)
    df['HL_pct'] = (df['High'] - df['Low']) / df['Low'] * 100.0

    # Open to close procent change
    df['Daily_pct'] = (df['Close'] - df['Open']) / df['Open'] * 100.0

    # Defining features
    df = df[['Close', 'HL_pct', 'Daily_pct', 'Volume']]

    # Forecast, removing NaN and defining number of days for prediction
    forecast_col = 'Close'
    df.fillna(-99999, inplace = True)
    forecast_out = int(math.ceil(0.01*len(df))) #'0.01' = forecasting '1 pct.' out of the length of the dataframe - timeframe of 100 days equal prediction '1 day' out

    # Creating a Label column (defining label)
    df['Label'] = df[forecast_col].shift(-forecast_out)

    # Features = X and labels = y
    X = np.array(df.drop(['Label'], 1))
    X = preprocessing.scale(X)
    X_lately = X[-forecast_out:]
    X = X[:-forecast_out]

    df.dropna(inplace=True)
    y = np.array(df['Label'])

    # Training (fit) and testing (score)
    X_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, test_size = 0.2)
    clf = LinearRegression()
    clf.fit(X_train, y_train)
    accuracy = clf.score(X_test, y_test)

    print('Forecasting', forecast_out, 'days out')
    print('Accuracy is', round(accuracy, 3))

    # Forecast
    forecast_set = clf.predict(X_lately)
    #print(forecast_set)
    df['Forecast'] = np.nan

    # Plotting the forecast
    style.use('ggplot')

    last_date = df.iloc[-1].name
    last_unix = last_date.timestamp()
    one_day = 86400
    next_unix = last_unix + one_day

    for i in forecast_set:
        next_date = dt.datetime.fromtimestamp(next_unix)
        next_unix += one_day
        df.loc[next_date] = [np.nan for _ in range(len(df.columns)-1)] + [i]

    last_row_before_forecast = df.loc[last_date]
    df.loc[last_date] = np.hstack((last_row_before_forecast.values[:-1], last_row_before_forecast[forecast_col]))

    df_actual = web.DataReader(ticker, 'yahoo', start, end='2020-01-31')
    df_actual['Close'].plot(linewidth=0.8, color = '#91BFF0')
    df['Close'].plot(linewidth=0.8, color = '#3B91EE')
    df['Forecast'].plot(linewidth=0.8, color = '#F04871')
    plt.legend (['Actual closing price','Pre closing price','Forecast closing price'],loc = 2)
    plt.xlabel('Date')
    plt.ylabel('Price')
    plt.show()


ticker_prediction_ML()
